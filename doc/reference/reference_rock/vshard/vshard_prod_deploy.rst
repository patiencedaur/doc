===============================================================================
Production Deployment
===============================================================================

..	NOTE::

	Если вам необходимо кластерное решения с шардированием и автоматическим фейловером,
	читайте раздел про Tarantool Cartridge.

	Данный раздел полезен для тех, кому Cartridge не подошел по тем или иным причинам.
	При работе с ``vshard`` вам необходимо будет самостоятельно реализовать механизм фейловера
	для автоматического переключения мастера в случае аварии.


..	[] TODO: Обновить README в tarantool/vshard

Для кого этот раздел?
---------------------

- для тех, кому не подошел/не понравился/не понятен Cartridge
	- например фейловера боятся каржового
	- не нравится механизм ролей
- для тех кому нужна специфичная топология репликации
- для тех кто присел на vshard до того как появился карж
	(НО У НИХ УЖЕ МОЖЕТ БЫТЬ СВОЙ ПАЙПЛАЙН ДЕПЛОЯ НАСТРОЕННЫЙ И ОТЛАЖЕННЫЙ)


Архитектура
-----------

Помимо роутеров и стораджей в кластере вам необходимо два компонента для работы: сервер конфигурации и etcd.

Сервер конфигурации необходим для получения информации о топологии кластера. Это необходимо для:
-  ``tt`` через который вы управляете кластером из командной строки

- для самих инстансов, которые получают обновления в топологии и применяют изменения

- для коннекторов из ЯП, которым необходимо получать список роутеров для работы с данными

``etcd`` необходим для надежного хранения данных о топологии и конфигурации кластера. В дальнейшем появится возможность хранить эти данные в отдельном кластере Tarantool. Это избавит от настройки внешнего компонента.

Деплой приложения производится инструментом ``tt``. Это единый CLI, который позволяет работать с кластерами Tarantool. Перед деплоем необходимо описать топологию и конфигурацию кластера в формате ``vshard``. О ней можно прочесть <тут>.

В нем также описываются IP адреса и порты каждого из инстансов.

???

.. CODE::bash

	tt deploy -f cluster.yml


После этой команды произойдет следующее:
- будет раздеплоен сервер конфигурации
- в сервер конфигурации будет загружена топология кластера
- на соответствующих машинах будут установлены супервизоры и запустятся необходимые инстансы

После запуска инстансы должны получить информацию о конфигурации ``vshard`` и самого Tarantool. А для этого им необходимо получить ее у сервера конфигурации. По умолчанию, Tarantool ничего не знает о сервере конфигурации, поэтому вам необходимо вставить следующий код в начало приложения:

.. CODE::lua

	local topology_mod = require('topology')
	local conf_mod = require('conf')

	local conf = conf_mod.new({ driver = 'etcd', endpoints = { os.env('TARANTOOL_CONF_ENDPOINTS') }, server_api_version = 'v3' })

	local topology = topology_mod.new(conf_inst, 'any-unique-app-name', true)
	local fiber = require('fiber')

	fiber.new(function()
		while true do:
			-- vshard.router.cfg(topology.get_vshard_conf())
			vshard.storage.cfg(topology.get_vshard_conf())
			fiber.sleep(5)
		end
	end)



